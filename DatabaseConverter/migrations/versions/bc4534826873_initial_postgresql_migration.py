"""Initial PostgreSQL migration

Revision ID: bc4534826873
Revises: 
Create Date: 2025-09-19 09:32:05.918776

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'bc4534826873'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('companies',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('company_number', sa.String(length=20), nullable=False),
    sa.Column('company_name', sa.String(length=500), nullable=True),
    sa.Column('company_status', sa.String(length=50), nullable=True),
    sa.Column('company_type', sa.String(length=100), nullable=True),
    sa.Column('jurisdiction', sa.String(length=50), nullable=True),
    sa.Column('date_of_creation', sa.DateTime(), nullable=True),
    sa.Column('date_of_cessation', sa.DateTime(), nullable=True),
    sa.Column('address_line_1', sa.String(length=200), nullable=True),
    sa.Column('address_line_2', sa.String(length=200), nullable=True),
    sa.Column('locality', sa.String(length=100), nullable=True),
    sa.Column('region', sa.String(length=100), nullable=True),
    sa.Column('postal_code', sa.String(length=20), nullable=True),
    sa.Column('country', sa.String(length=50), nullable=True),
    sa.Column('sic_codes', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('raw_json', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('company_number')
    )
    op.create_index('idx_company_creation', 'companies', ['date_of_creation'], unique=False)
    op.create_index('idx_company_location', 'companies', ['postal_code', 'country'], unique=False)
    op.create_index('idx_company_name', 'companies', ['company_name'], unique=False)
    op.create_index('idx_company_number', 'companies', ['company_number'], unique=True)
    op.create_index('idx_company_status', 'companies', ['company_status'], unique=False)
    op.create_index('idx_company_type', 'companies', ['company_type'], unique=False)
    op.create_table('linkedhelper_connections',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('full_name', sa.String(length=200), nullable=True),
    sa.Column('first_name', sa.String(length=100), nullable=True),
    sa.Column('last_name', sa.String(length=100), nullable=True),
    sa.Column('company', sa.String(length=200), nullable=True),
    sa.Column('position', sa.String(length=200), nullable=True),
    sa.Column('linkedin_url', sa.Text(), nullable=True),
    sa.Column('connection_status', sa.String(length=50), nullable=True),
    sa.Column('date_connected', sa.DateTime(), nullable=True),
    sa.Column('message_sent', sa.Text(), nullable=True),
    sa.Column('replied', sa.String(length=10), nullable=True),
    sa.Column('tags', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_linkedin_company', 'linkedhelper_connections', ['company'], unique=False)
    op.create_index('idx_linkedin_connected', 'linkedhelper_connections', ['date_connected'], unique=False)
    op.create_index('idx_linkedin_name', 'linkedhelper_connections', ['full_name'], unique=False)
    op.create_index('idx_linkedin_status', 'linkedhelper_connections', ['connection_status'], unique=False)
    op.create_table('officers',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('ch_officer_id', sa.String(length=100), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('date_of_birth_month', sa.Integer(), nullable=True),
    sa.Column('date_of_birth_year', sa.Integer(), nullable=True),
    sa.Column('nationality', sa.String(length=50), nullable=True),
    sa.Column('occupation', sa.String(length=200), nullable=True),
    sa.Column('address_line_1', sa.String(length=200), nullable=True),
    sa.Column('address_line_2', sa.String(length=200), nullable=True),
    sa.Column('locality', sa.String(length=100), nullable=True),
    sa.Column('region', sa.String(length=100), nullable=True),
    sa.Column('postal_code', sa.String(length=20), nullable=True),
    sa.Column('country', sa.String(length=50), nullable=True),
    sa.Column('raw_json', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('ch_officer_id')
    )
    op.create_index('idx_officer_ch_id', 'officers', ['ch_officer_id'], unique=True)
    op.create_index('idx_officer_dob', 'officers', ['date_of_birth_year', 'date_of_birth_month'], unique=False)
    op.create_index('idx_officer_name', 'officers', ['name'], unique=False)
    op.create_index('idx_officer_nationality', 'officers', ['nationality'], unique=False)
    op.create_table('planning_applications',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('borough', sa.String(length=100), nullable=False),
    sa.Column('reference', sa.String(length=50), nullable=False),
    sa.Column('application_type', sa.String(length=100), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('decision_date', sa.DateTime(), nullable=True),
    sa.Column('received_date', sa.DateTime(), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_outline', sa.Boolean(), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('planning_url', sa.Text(), nullable=True),
    sa.Column('organisation', sa.String(length=200), nullable=True),
    sa.Column('raw_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_planning_borough_ref', 'planning_applications', ['borough', 'reference'], unique=True)
    op.create_index('idx_planning_dates', 'planning_applications', ['decision_date', 'received_date'], unique=False)
    op.create_index('idx_planning_location', 'planning_applications', ['latitude', 'longitude'], unique=False)
    op.create_index('idx_planning_status', 'planning_applications', ['status'], unique=False)
    op.create_index('idx_planning_type', 'planning_applications', ['application_type'], unique=False)
    op.create_table('applicants',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('planning_application_id', sa.Integer(), nullable=False),
    sa.Column('raw_name', sa.String(length=500), nullable=False),
    sa.Column('normalized_name', sa.String(length=500), nullable=True),
    sa.Column('applicant_type', sa.String(length=50), nullable=True),
    sa.Column('contact_email', sa.String(length=200), nullable=True),
    sa.Column('contact_phone', sa.String(length=50), nullable=True),
    sa.Column('contact_address', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['planning_application_id'], ['planning_applications.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_applicant_name', 'applicants', ['normalized_name'], unique=False)
    op.create_index('idx_applicant_planning', 'applicants', ['planning_application_id'], unique=False)
    op.create_index('idx_applicant_type', 'applicants', ['applicant_type'], unique=False)
    op.create_table('appointments',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('officer_id', sa.Integer(), nullable=False),
    sa.Column('company_id', sa.Integer(), nullable=False),
    sa.Column('role', sa.String(length=100), nullable=False),
    sa.Column('appointed_date', sa.DateTime(), nullable=True),
    sa.Column('resigned_date', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('raw_json', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['officer_id'], ['officers.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_appointment_active', 'appointments', ['is_active'], unique=False)
    op.create_index('idx_appointment_company', 'appointments', ['company_id'], unique=False)
    op.create_index('idx_appointment_dates', 'appointments', ['appointed_date', 'resigned_date'], unique=False)
    op.create_index('idx_appointment_officer', 'appointments', ['officer_id'], unique=False)
    op.create_index('idx_appointment_role', 'appointments', ['role'], unique=False)
    op.create_index('idx_appointment_unique', 'appointments', ['officer_id', 'company_id', 'role', 'appointed_date'], unique=True)
    op.create_table('enrichment_data',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.Integer(), nullable=False),
    sa.Column('provider', sa.String(length=100), nullable=False),
    sa.Column('enrichment_data', sa.JSON(), nullable=True),
    sa.Column('success', sa.Boolean(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_enrichment_company', 'enrichment_data', ['company_id'], unique=False)
    op.create_index('idx_enrichment_provider', 'enrichment_data', ['provider'], unique=False)
    op.create_index('idx_enrichment_success', 'enrichment_data', ['success'], unique=False)
    op.create_index('idx_enrichment_unique', 'enrichment_data', ['company_id', 'provider'], unique=True)
    op.create_table('planning_data',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.Integer(), nullable=False),
    sa.Column('application_type', sa.String(length=100), nullable=True),
    sa.Column('decision_date', sa.DateTime(), nullable=True),
    sa.Column('name', sa.String(length=200), nullable=True),
    sa.Column('reference', sa.String(length=50), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('organisation', sa.String(length=200), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('point', sa.String(length=100), nullable=True),
    sa.Column('planning_url', sa.Text(), nullable=True),
    sa.Column('last_updated', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_planning_data_company', 'planning_data', ['company_id'], unique=False)
    op.create_index('idx_planning_data_reference', 'planning_data', ['reference'], unique=False)
    op.create_index('idx_planning_data_status', 'planning_data', ['status'], unique=False)
    op.create_table('processing_log',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.Integer(), nullable=False),
    sa.Column('action', sa.String(length=100), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('message', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_processing_action', 'processing_log', ['action'], unique=False)
    op.create_index('idx_processing_company', 'processing_log', ['company_id'], unique=False)
    op.create_index('idx_processing_created', 'processing_log', ['created_at'], unique=False)
    op.create_index('idx_processing_status', 'processing_log', ['status'], unique=False)
    op.create_table('shared_officer_edges',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('company_a_id', sa.Integer(), nullable=False),
    sa.Column('company_b_id', sa.Integer(), nullable=False),
    sa.Column('shared_officer_count', sa.Integer(), nullable=True),
    sa.Column('last_computed', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['company_a_id'], ['companies.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['company_b_id'], ['companies.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_shared_edge_companies', 'shared_officer_edges', ['company_a_id', 'company_b_id'], unique=True)
    op.create_index('idx_shared_edge_computed', 'shared_officer_edges', ['last_computed'], unique=False)
    op.create_index('idx_shared_edge_count', 'shared_officer_edges', ['shared_officer_count'], unique=False)
    op.create_table('applicant_company_matches',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('applicant_id', sa.Integer(), nullable=False),
    sa.Column('company_id', sa.Integer(), nullable=False),
    sa.Column('match_method', sa.String(length=50), nullable=False),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('verified', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['applicant_id'], ['applicants.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_match_applicant', 'applicant_company_matches', ['applicant_id'], unique=False)
    op.create_index('idx_match_company', 'applicant_company_matches', ['company_id'], unique=False)
    op.create_index('idx_match_confidence', 'applicant_company_matches', ['confidence_score'], unique=False)
    op.create_index('idx_match_method', 'applicant_company_matches', ['match_method'], unique=False)
    op.create_index('idx_match_unique', 'applicant_company_matches', ['applicant_id', 'company_id'], unique=True)
    op.create_index('idx_match_verified', 'applicant_company_matches', ['verified'], unique=False)
    op.create_table('contacts',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.Integer(), nullable=True),
    sa.Column('officer_id', sa.Integer(), nullable=True),
    sa.Column('applicant_id', sa.Integer(), nullable=True),
    sa.Column('contact_type', sa.String(length=50), nullable=False),
    sa.Column('contact_value', sa.String(length=500), nullable=False),
    sa.Column('source', sa.String(length=100), nullable=True),
    sa.Column('verification_status', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['applicant_id'], ['applicants.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['officer_id'], ['officers.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_contact_applicant', 'contacts', ['applicant_id'], unique=False)
    op.create_index('idx_contact_company', 'contacts', ['company_id'], unique=False)
    op.create_index('idx_contact_officer', 'contacts', ['officer_id'], unique=False)
    op.create_index('idx_contact_source', 'contacts', ['source'], unique=False)
    op.create_index('idx_contact_status', 'contacts', ['verification_status'], unique=False)
    op.create_index('idx_contact_type', 'contacts', ['contact_type'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_contact_type', table_name='contacts')
    op.drop_index('idx_contact_status', table_name='contacts')
    op.drop_index('idx_contact_source', table_name='contacts')
    op.drop_index('idx_contact_officer', table_name='contacts')
    op.drop_index('idx_contact_company', table_name='contacts')
    op.drop_index('idx_contact_applicant', table_name='contacts')
    op.drop_table('contacts')
    op.drop_index('idx_match_verified', table_name='applicant_company_matches')
    op.drop_index('idx_match_unique', table_name='applicant_company_matches')
    op.drop_index('idx_match_method', table_name='applicant_company_matches')
    op.drop_index('idx_match_confidence', table_name='applicant_company_matches')
    op.drop_index('idx_match_company', table_name='applicant_company_matches')
    op.drop_index('idx_match_applicant', table_name='applicant_company_matches')
    op.drop_table('applicant_company_matches')
    op.drop_index('idx_shared_edge_count', table_name='shared_officer_edges')
    op.drop_index('idx_shared_edge_computed', table_name='shared_officer_edges')
    op.drop_index('idx_shared_edge_companies', table_name='shared_officer_edges')
    op.drop_table('shared_officer_edges')
    op.drop_index('idx_processing_status', table_name='processing_log')
    op.drop_index('idx_processing_created', table_name='processing_log')
    op.drop_index('idx_processing_company', table_name='processing_log')
    op.drop_index('idx_processing_action', table_name='processing_log')
    op.drop_table('processing_log')
    op.drop_index('idx_planning_data_status', table_name='planning_data')
    op.drop_index('idx_planning_data_reference', table_name='planning_data')
    op.drop_index('idx_planning_data_company', table_name='planning_data')
    op.drop_table('planning_data')
    op.drop_index('idx_enrichment_unique', table_name='enrichment_data')
    op.drop_index('idx_enrichment_success', table_name='enrichment_data')
    op.drop_index('idx_enrichment_provider', table_name='enrichment_data')
    op.drop_index('idx_enrichment_company', table_name='enrichment_data')
    op.drop_table('enrichment_data')
    op.drop_index('idx_appointment_unique', table_name='appointments')
    op.drop_index('idx_appointment_role', table_name='appointments')
    op.drop_index('idx_appointment_officer', table_name='appointments')
    op.drop_index('idx_appointment_dates', table_name='appointments')
    op.drop_index('idx_appointment_company', table_name='appointments')
    op.drop_index('idx_appointment_active', table_name='appointments')
    op.drop_table('appointments')
    op.drop_index('idx_applicant_type', table_name='applicants')
    op.drop_index('idx_applicant_planning', table_name='applicants')
    op.drop_index('idx_applicant_name', table_name='applicants')
    op.drop_table('applicants')
    op.drop_index('idx_planning_type', table_name='planning_applications')
    op.drop_index('idx_planning_status', table_name='planning_applications')
    op.drop_index('idx_planning_location', table_name='planning_applications')
    op.drop_index('idx_planning_dates', table_name='planning_applications')
    op.drop_index('idx_planning_borough_ref', table_name='planning_applications')
    op.drop_table('planning_applications')
    op.drop_index('idx_officer_nationality', table_name='officers')
    op.drop_index('idx_officer_name', table_name='officers')
    op.drop_index('idx_officer_dob', table_name='officers')
    op.drop_index('idx_officer_ch_id', table_name='officers')
    op.drop_table('officers')
    op.drop_index('idx_linkedin_status', table_name='linkedhelper_connections')
    op.drop_index('idx_linkedin_name', table_name='linkedhelper_connections')
    op.drop_index('idx_linkedin_connected', table_name='linkedhelper_connections')
    op.drop_index('idx_linkedin_company', table_name='linkedhelper_connections')
    op.drop_table('linkedhelper_connections')
    op.drop_index('idx_company_type', table_name='companies')
    op.drop_index('idx_company_status', table_name='companies')
    op.drop_index('idx_company_number', table_name='companies')
    op.drop_index('idx_company_name', table_name='companies')
    op.drop_index('idx_company_location', table_name='companies')
    op.drop_index('idx_company_creation', table_name='companies')
    op.drop_table('companies')
    # ### end Alembic commands ###